ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
library(needs)
install.packages("needs")
library(needs)
str(df)
df$diagnosis <- as.factor(df$diagnosis)
summary(df)
prop.table(table(df$diagnosis))
corr_mat <- cor(data[,3:ncol(df)])
corr_mat <- cor(df[,3:ncol(df)])
corrplot(corr_mat,order = "hclust",t1.cex = 1 , addrect = 8)
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
corrplot(corr_mat,order = "hclust",t1.cex = 1 , addrect = 8)
set.seed(1234)
train_df <- df[data_index, - 1]
data_index <- createDataPartition(df$diagnosis, p = 0.7 , list = FALSE)
train_df <- df[data_index, - 1]
test_df <- df[-data_index, -1]
pca_res <- prcomp(df[,3:ncol(df)],center = TRUE, scale = TRUE)
plot(pca_res, type = "1")
library(ggplot2)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
library(ISLR)
library(tidyverse)
library(ggplot2)
library(tibble)
library(tidyr)
library(dataMaid)
library(Amelia)
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
install.packages("C:/Users/Hendrich/Downloads/doMC_1.3.7.tar.gz", repos = NULL, type = "source")
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble)
install.packages("doMC", repos="http://R-Forge.R-project.org")
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
library(tibble)
library(tidyr)
library(dataMaid)
library(Amelia)
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
df = read.csv("data.csv")
set.seed(456)
#Drop columns which unnecessary
df = subset(df,select = -c(X,id))
print(head(df,4))
makeDataReport(df,output = "EDA.Rmd",
render = TRUE,
replace = TRUE,
)
str(df)
df$diagnosis <- as.factor(df$diagnosis)
summary(df)
prop.table(table(df$diagnosis))
corr_mat <- cor(df[,3:ncol(df)])
corrplot(corr_mat,order = "hclust",t1.cex = 1 , addrect = 8)
set.seed(1234)
data_index <- createDataPartition(df$diagnosis, p = 0.7 , list = FALSE)
train_df <- df[data_index, - 1]
test_df <- df[-data_index, -1]
pca_res <- prcomp(df[,3:ncol(df)],center = TRUE, scale = TRUE)
plot(pca_res, type = "1")
View(pca_res)
View(pca_res)
plot(pca_res,type = '1')
lda_df <- predict(lda_res,df)$x %>% as.data.frame() %>% cbind(diagnosis = df$diagnosis)
lda_res <- lda(diagnosis~.,df,center= TRUE,scale = TRUE)
lda_df <- predict(lda_res,df)$x %>% as.data.frame() %>% cbind(diagnosis = df$diagnosis)
lda_res
ggplot(lda_df,aes(x= LD1, y = 0, col= diagnosis)) + geom_point(alpha = 0.5)
ggplot(lda_df, aes(x = LD1, fill= diagnosis)) + geom_density(alpha = 0.5)
train_data <- lda_df[data_index,]
test_data <- lda_df[-data_index,]
View(test_data)
fit_control <- trainControl(method = "cv",
number = 5,
preProcOptions = list(thresh = 0.99),
classProbs = TRUE,
summaryFunction = twoClassSummary)
library(ISLR)
library(tidyverse)
library(ggplot2)
library(tibble)
library(tidyr)
library(dataMaid)
library(Amelia)
library(klaR)
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
df = read.csv("data.csv")
set.seed(456)
print(head(df,4))
str(df)
df$diagnosis <- as.factor(df$diagnosis)
summary(df)
df[,33] <- NULL
prop.table(table(df$diagnosis))
corr_mat <- cor(df[,3:ncol(df)])
corrplot(corr_mat,order = "hclust",t1.cex = 1 , addrect = 8)
set.seed(1234)
data_index <- createDataPartition(df$diagnosis, p = 0.7 , list = FALSE)
train_df <- df[data_index, - 1]
test_df <- df[-data_index, -1]
pca_res <- prcomp(df[,3:ncol(df)], center = TRUE , scale = TRUE)
plot(pca_res , type = "b")
lda_res <- lda(diagnosis~.,df,center= TRUE,scale = TRUE)
lda_df <- predict(lda_res,df)$x %>% as.data.frame() %>% cbind(diagnosis = df$diagnosis)
lda_res
ggplot(lda_df,aes(x= LD1, y = 0, col= diagnosis)) + geom_point(alpha = 0.5)
ggplot(lda_df, aes(x = LD1, fill= diagnosis)) + geom_density(alpha = 0.5)
train_data <- lda_df[data_index,]
test_data <- lda_df[-data_index,]
fit_control <- trainControl(method = "cv",
number = 5,
preProcOptions = list(thresh = 0.99),
classProbs = TRUE,
summaryFunction = twoClassSummary)
model_nnet <- train(diagnosis~.,
train_df,
methods = "nnet",
metric = "ROC",
preProcess = c('center', 'scale'),
trace= FALSE,
tuneLength = 10,
trControl = fit_control)
pred_nnet <- predict(model_nnet, test_df) # Check probality in Test data
pred_train <- predict(model_nnet, train_df) # Check probality in Train data
cm_nnet <- confusionMatrix(pred_nnet,test_df$diagnosis, positive = "M")
cm_nnet_train <- confusionMatrix(pred_train ,train_df$diagnosis, positive = "M" )
cm_nnet_train
cm_nnet
model_knn <- train(diagnosis~.,
train_df,
method = "knn",
metric = "ROC",
preProcess = c('center', 'scale'),
tuneLength = 10,
trControl = fit_control)
pred_knn <- predict(model_knn, train_df) # Check probality in train data
pred_knn_tesr <- predict(model_knn , test_df) # check probality in test data
cm_knn_train <- confusionMatrix(pred_knn,train_df$diagnosis,positive = "M")
cm_knn_test <- confusionMatrix(pred_knn_tesr, test_df$diagnosis, positive = "M")
cm_knn_train
cm_knn_test
# Naive Bayes
model_nb <- train(diagnosis~.,
train_df,
method = "nb",
metric = "ROC",
preProcess = c('center', 'scale'),
trace= FALSE,
trControl = fit_control)
pred_nb_train <- predict(model_nb , train_df) # Check train
pred_nb_test <- predict(model_nb, test_df) # Check test
cm_nb_train <- confusionMatrix(pred_nb_train , train_df$diagnosis , positive = "M")
cm_nb_test <- confusionMatrix(pred_nb_test , test_df$diagnosis , positive =  "M")
cm_nb_train
cm_nb_train
cm_nb_test
# Linear Discriminal Analysis
model_lda <- train
# Linear Discriminal Analysis
model_lda <- train(diagnosis~.,
train_data,
method = "lda2",
metric = "ROC",
preProcess = c('center', 'scale'),
trControl = fit_control)
pred_lda_train <- predict(model_lda , train_data)
pred_lda_test <- predict(model_lda , test_data)
cm_lda_train <- confusionMatrix(pred_lda_train , train_data$diagnosis, positive = "M")
cm_lda_test <- confusionMatrix(pred_lda_test, test_data$diagnosis , positive ="M")
cm_lda_train
cm_lda_test
cm_lda_train
cm_lda_train
cm_lda_test
pred_prod_lda <- predict(model_lda,test_data,type = "prod")
pred_prod_lda <- predict(model_lda, test_data ,type = "prod")
pred_prod_lda <- predict(model_lda, test_data ,type = "prob")
roc_lda <- roc(test_data$diagnosis , pred_prod_lda$M)
plot(roc_lda)
colAUC(pred_prod_lda, test_data$diagnosis, plotROC = TRUE)
model_svm <- train(diagnosis~.,
train_data,
method="svmRadial",
metric="ROC",
preProcess=c('center', 'scale'),
trace=FALSE,
trControl=fitControl)
model_svm <- train(diagnosis~.,
train_data,
method="svmRadial",
metric="ROC",
preProcess=c('center', 'scale'),
trace=FALSE,
trControl=fit_Control)
model_svm <- train(diagnosis~.,
train_data,
method="svmRadial",
metric="ROC",
preProcess=c('center', 'scale'),
trace=FALSE,
trControl=fit_control)
pred_svm_train <- predict(model_svm , train_df) # Check train
pred_svm_train <- predict(model_svm , train_df) # Check train
model_svm <- train(diagnosis~.,
train_data,
method="svmRadial",
metric="ROC",
preProcess=c('center', 'scale'),
trace=FALSE,
trControl=fit_control)
model_svm <- train(diagnosis~.,
train_data,
method="svmRadial",
metric="ROC",
preProcess=c('center', 'scale'),
trace=FALSE,
trControl=fit_control)
View(model_svm)
pred_svm_train <- predict(model_svm , train_df) # Check train
pred_svm_test <- predict(model_svm, test_df) # Check test
pred_svm_train <- predict(model_svm, train_df) # Check train
pred_svm_train <- predict(model_svm, train_df) # Check train
pred_svm_train <- predict(model_svm , train_df) # Check train
pred_svm_train <- predict(model_svm , train_df) # Check train
pred_svm_test <- predict(model_svm, test_df) # Check test
cm_svm_train <- confusionMatrix(pred_svm_train , train_df$diagnosis , positive = "M")
cm_svm_test <- confusionMatrix(pred_svm_test , test_df$diagnosis , positive =  "M")
model_svm <- train(diagnosis~.,
train_df,
method="svmRadial",
metric="ROC",
preProcess=c('center', 'scale'),
trace=FALSE,
trControl=fit_control)
pred_svm_train <- predict(model_svm , train_df) # Check train
pred_svm_test <- predict(model_svm, test_df) # Check test
cm_svm_train <- confusionMatrix(pred_svm_train , train_df$diagnosis , positive = "M")
cm_svm_test <- confusionMatrix(pred_svm_test , test_df$diagnosis , positive =  "M")
cm_svm_train
cm_svm_test
model_rf <- train(diagnosis~.,
train_df,
method="ranger",
metric="ROC",
tuneLength=10,
tuneGrid = expand.grid(mtry = c(2, 3, 6)),
preProcess = c('center', 'scale'),
trControl=fit_control)
model_rf <- train(diagnosis~.,
train_df,
method="ranger",
metric="ROC",
#tuneLength=10,
tuneGrid = expand.grid(mtry = c(2, 3, 6)),
preProcess = c('center', 'scale'),
trControl=fit_control)
model_rf <- train(diagnosis~.,
train_df,
method="ranger",
metric="ROC",
tuneLength=10,
#tuneGrid = expand.grid(mtry = c(2, 3, 6)),
preProcess = c('center', 'scale'),
trControl=fit_control)
pred_rf_train <- predict(model_rf , train_df) # Check train
pred_rf_test <- predict(model_rf, test_df) # Check test
cm_rf_train <- confusionMatrix(pred_rf_train , train_df$diagnosis , positive = "M")
cm_rf_test <- confusionMatrix(pred_rf_test , test_df$diagnosis , positive =  "M")
cm_rf_train
cm_rf_test
model_list <- list(RF = model_rf, NNET = model_nnet , KNN = model_knn,
SVM = model_svm , LDA = model_lda , NB = model_nb,
)
model_list <- list(RF = model_rf, NNET = model_nnet , KNN = model_knn,
SVM = model_svm , LDA = model_lda , NB = model_nb,
)
model_list <- list(RF = model_rf, NNET = model_nnet , KNN = model_knn,
SVM = model_svm , LDA = model_lda , NB = model_nb
)
result_list <- resamples(model_list)
model_cor <- modelCor(result_list)
corrplot(model_cor)
model_cor
#Plot comparasion
bwplot(result_list,metric = "ROC")
bwplot(result_list,metric = "AUC")
cp_list <- list(RF = cm_rf_test, NNET = cm_nnet , KNN = cm_knn_test ,
SVM = cm_svm_test , LDA = cm_lda_test , NB = cm_nb_test
)
cp_list_result <- sapply(cp_list , function(x) x$byClass)
cp_list_result
cm_result_max <- apply(cp_list_result, 1 ,which.is.max)
cm_result_max <- apply(cp_list_result, 1 ,which.max)
output_report <- data.frame(metric = names(cm_result_max),
best_model = colnames(cp_list_result)[cm_result_max],
value = mapply(function(x,y) {cp_list_result[x,y]},
names(cm_result_max),
cm_result_max))
rownames(output_report) <- NULL
output_report
library(ISLR)
library(tidyverse)
library(ggplot2)
library(tibble)
library(tidyr)
library(dataMaid)
library(Amelia)
library(klaR)
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
df = read.csv("data.csv")
set.seed(456)
#Drop columns which unnecessary
df = subset(df,select = -c(X,id))
print(head(df,4))
View(df)
str(df)
df$diagnosis <- as.factor(df$diagnosis)
summary(df)
df[,33] <- NULL
prop.table(table(df$diagnosis))
corr_mat <- cor(df[,3:ncol(df)])
corrplot(corr_mat,order = "hclust",t1.cex = 1 , addrect = 8)
set.seed(1234)
data_index <- createDataPartition(df$diagnosis, p = 0.7 , list = FALSE)
train_df <- df[data_index, - 1]
test_df <- df[-data_index, -1]
pca_res <- prcomp(df[,3:ncol(df)], center = TRUE , scale = TRUE)
plot(pca_res , type = "b")
lda_res <- lda(diagnosis~.,df,center= TRUE,scale = TRUE)
lda_df <- predict(lda_res,df)$x %>% as.data.frame() %>% cbind(diagnosis = df$diagnosis)
lda_res
ggplot(lda_df,aes(x= LD1, y = 0, col= diagnosis)) + geom_point(alpha = 0.5)
ggplot(lda_df, aes(x = LD1, fill= diagnosis)) + geom_density(alpha = 0.5)
train_data <- lda_df[data_index,]
test_data <- lda_df[-data_index,]
fit_control <- trainControl(method = "cv",
number = 5,
preProcOptions = list(thresh = 0.99),
classProbs = TRUE,
summaryFunction = twoClassSummary)
model_nnet <- train(diagnosis~.,
train_df,
methods = "nnet",
metric = "ROC",
preProcess = c('center', 'scale'),
trace= FALSE,
tuneLength = 10,
trControl = fit_control)
model_nnet <- train(diagnosis~.,
train_df,
methods = "nnet",
metric = "ROC",
preProcess = c('center', 'scale'),
trace= FALSE,
tuneLength = 10,
trControl = fit_control)
library(ISLR)
library(tidyverse)
library(ggplot2)
library(tibble)
library(tidyr)
library(dataMaid)
library(Amelia)
library(klaR)
library(needs)
needs(readr,
dplyr,
ggplot2,
corrplot,
gridExtra,
pROC,
MASS,
caTools,
caret,
caretEnsemble,
doMC)
df = read.csv("data.csv")
set.seed(456)
print(head(df,4))
str(df)
df$diagnosis <- as.factor(df$diagnosis)
summary(df)
df[,33] <- NULL
View(df)
prop.table(table(df$diagnosis))
corr_mat <- cor(df[,3:ncol(df)])
corrplot(corr_mat,order = "hclust",t1.cex = 1 , addrect = 8)
set.seed(1234)
data_index <- createDataPartition(df$diagnosis, p = 0.7 , list = FALSE)
train_df <- df[data_index, - 1]
test_df <- df[-data_index, -1]
pca_res <- prcomp(df[,3:ncol(df)], center = TRUE , scale = TRUE)
plot(pca_res , type = "b")
lda_res <- lda(diagnosis~.,df,center= TRUE,scale = TRUE)
lda_df <- predict(lda_res,df)$x %>% as.data.frame() %>% cbind(diagnosis = df$diagnosis)
lda_res
ggplot(lda_df,aes(x= LD1, y = 0, col= diagnosis)) + geom_point(alpha = 0.5)
ggplot(lda_df, aes(x = LD1, fill= diagnosis)) + geom_density(alpha = 0.5)
train_data <- lda_df[data_index,]
test_data <- lda_df[-data_index,]
fit_control <- trainControl(method = "cv",
number = 5,
preProcOptions = list(thresh = 0.99),
classProbs = TRUE,
summaryFunction = twoClassSummary)
model_nnet <- train(diagnosis~.,
train_df,
methods = "nnet",
metric = "ROC",
preProcess = c('center', 'scale'),
trace= FALSE,
tuneLength = 10,
trControl = fit_control)
pred_nnet <- predict(model_nnet, test_df) # Check probality in Test data
pred_train <- predict(model_nnet, train_df) # Check probality in Train data
cm_nnet <- confusionMatrix(pred_nnet,test_df$diagnosis, positive = "M")
cm_nnet_train <- confusionMatrix(pred_train ,train_df$diagnosis, positive = "M" )
cm_nnet_train
cm_nnet
